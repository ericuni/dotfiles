if [ -f ~/git/dotfiles/zsh/antigen.zsh ]; then
  source ~/git/dotfiles/zsh/antigen.zsh

  antigen use oh-my-zsh

  antigen bundle command-not-found
  antigen bundle zsh-users/zsh-autosuggestions
  antigen bundle zsh-users/zsh-completions
  antigen bundle zsh-users/zsh-syntax-highlighting

  antigen theme simple

  antigen apply
fi

export TERM=xterm-256color
export LANG=en_US.UTF-8
export PS1='%(!.%{$fg[red]%}.%{$fg[green]%})%1~%{$fg_bold[blue]%}$(git_prompt_info)%{$reset_color%} '
export RPROMPT='%n@%m %*'

setopt vi
setopt NO_HUP
setopt rmstarsilent  ## supress warning when `rm -rf *` "zsh: sure you want to delete all the files in ... [yn]"?

function append_path() {
  for p in $@; do
    [[ -d $p ]] && [[ ! $PATH =~ $p ]] && export PATH=$p:$PATH
  done
}

function source_path() {
  for p in $@; do
    [[ -f $p ]] && source $p
  done
}

## replace vi nvim vim
function replace() {
  if [[ $# -lt 2 ]]; then
    echo "arguments error" >&2
    return 1
  fi
  which $2>/dev/null
  if [[ $? -eq 0 ]]; then
    alias $1=$2
  elif [[ $# -eq 3 ]]; then
    alias $1=$3
  fi
}

append_path /sbin /usr/sbin /usr/local/sbin
append_path $HOME/bin $HOME/git/note/bin

if [[ $OSTYPE =~ "darwin" ]]; then
  export os="mac"
  export ip=`ifconfig en0 | grep inet | grep -v inet6 | awk '{print $2}'`
elif [[ $OSTYPE =~ "linux" ]]; then
  export os="linux"
  export ip=`ip -4 address | grep eth0 | tail -n 1 | awk '{print $2}' | awk -F'/' '{print $1}'`
  export env=`systemd-detect-virt`
fi

ulimit -c unlimited

alias grep='grep --color=auto'
alias watch='watch -d -n 1'
alias tuer="ps x | fzf | awk '{print \$1}' | xargs kill -9"
alias tmux="TERM=screen-256color-bce tmux"

if [[ $os == "mac" ]]; then
  alias sha256="shasum -a 256"
fi

append_path $HOME/opt/nvim/bin
replace vi nvim vim

replace fd fdfind

replace ls lsd
alias ll="ls -l"

export no_proxy="localhost,127.0.0.1,$ip"

# fzf
export FZF_DEFAULT_COMMAND='rg --files'
export FZF_CTRL_T_COMMAND="$FZF_DEFAULT_COMMAND"  # to apply the command to CTRL-T as well
source_path "$HOME/.fzf.zsh"

# autojump
source_path "/usr/local/etc/profile.d/autojump.sh"  ## mac homebrew
source_path "/usr/share/autojump/autojump.sh"       ## linux

# git
export LESS="-F -X $LESS"  ## tells 'less' not to paginate if less than a page

# bazel
function bb() {
  target=":all"
  if [ $# -gt 0 ]; then
    if [[ $1 == :* ]]; then
      target=$1
      shift 1
    fi
  fi
  set -x
  bazel build $target $@
  set +x
}

function bt() {
  if [ $# -gt 0 ]; then
    bazel test --test_output=all $@
  else
    bazel test :all
  fi
}

function br() {
  bazel run --test_output=all $@
}
source_path $HOME/git/dotfiles/zsh/bazelfunctions.zsh

# golang
if [[ "$os" == "linux" ]]; then
  export GOROOT="$HOME/opt/go"
fi
export GOPATH="$HOME/go"
export GOBIN="$GOPATH/bin"
export GOTMPDIR="/tmp/go"
if [ ! -d $GOTMPDIR ]; then
  mkdir $GOTMPDIR
fi
append_path $GOROOT/bin $GOBIN
export GO111MODULE=on
export GOPROXY="https://goproxy.cn|https://proxy.golang.org|direct"
export GOSUMDB="sum.golang.google.cn"

append_path $HOME/.cargo/bin      ## rust
append_path $HOME/opt/node/bin    ## node
append_path $HOME/opt/protoc/bin  ## protoc + protoc-gen-go

# java
if [ -d $HOME/opt/jdk ]; then
  export JAVA_HOME="$HOME/opt/jdk"
  export PATH=$PATH:"$HOME/opt/jdk/bin"
fi

# enterprise
source_path $HOME/git/work/conf/zshrc

# udf
function where() {
  env | grep VIMRUNTIME >/dev/null
  if [ $? -eq 0 ]; then
    echo "vim"
  else
    echo "raw"
  fi
}

# docker machine
function dm() {
  if [[ "x$1" == "xinit" ]]; then
    name=$2
    if [[ -z $name ]]; then
      echo "name invalid" >&2
      return 1
    fi
    home="$HOME/.container"
    if [[ ! -d $home ]]; then
      mkdir $home
    fi

    image=`docker images | grep ubuntu | grep latest | awk '{print $1":"$2}' | sort -r | head -n 1`
    echo "image $image used" >&2

    ## http://stackoverflow.com/questions/35860527/warning-error-disabling-address-space-randomization-operation-not-permitted/35860616
    docker run -dt \
      -v $home:/root \
      -v $HOME:/root/host \
      -w /root \
      -p 8022:22 \
      --privileged \
      --security-opt seccomp=unconfined \
      --hostname $name \
      --name $name \
      $image
  else
    docker exec -it $1 /bin/zsh
  fi
}

# texlive
p="/usr/local/texlive/2020"
if [[ -d $p ]]; then
  append_path "$p/bin/x86_64-darwin"
  export INFOPATH="$p/texmf-dist/doc/info:$INFOPATH"
fi

function clean() {
  emulate -L bash

  ## latex
  rm *.aux *.bbl *.blg *.lof *.lot *.toc *.thm *.snm *.vrb *.nav *.fdb_latexmk *.fls, *.pre 2>/dev/null

  ## glog
  rm *.`hostname`.`whoami`.* 2>/dev/null
  for file in `ls *.INFO *.WARNING *.ERROR *.FATAL`
  do
    if [ -L $file ]; then
      rm $file
    fi
  done 2>/dev/null

  for file in `ls *.out *.log`
  do
    ## preserve nohup.out and err.log
    if [[ "x$file" == "xnohup.out" || "x$file" == "xerr.log" ]]; then
      continue
    fi
    rm $file
  done 2>/dev/null
}

function pdf() {
  if [ $# -ne 1 ]; then
    echo "no file" >&2
    return 1
  fi

  tex=`echo $1 | awk -F. '{print $1}'`

  xelatex $tex
  if [[ -d asytmp ]]; then
    cd asytmp
    asy $tex-*.asy || return 1
    cd -
  fi
  bibtex $tex
  xelatex $tex
  xelatex $tex  ## update cref
}

