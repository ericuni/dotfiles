snippet cmd "cmd template" b
#include <gflags/gflags.h>
#include <glog/logging.h>
#include <stdio.h>

int main(int argc, char* argv[]) {
  FLAGS_alsologtostderr = true;
  FLAGS_colorlogtostderr = true;
  google::InitGoogleLogging(argv[0]);
  google::ParseCommandLineFlags(&argc, &argv, true);

	$0

  return 0;
}
endsnippet

snippet ut "unit test" b
int main(int argc, char** argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
endsnippet

snippet leetcode "leetcode solution" b
#include <glog/logging.h>
#include <gtest/gtest.h>

/*

*/

class Solution {
 public:
  virtual ~Solution() {}
};

class Solution$2 : public Solution {
 public:
};

TEST($1, ex) {
  struct TestData {
  } tds[]{
  };

  std::vector<std::unique_ptr<Solution>> sos;
  sos.push_back(std::make_unique<Solution$2>());

  for (auto&& so : sos) {
    for (auto&& td : tds) {
    }
  }
}

int main(int argc, char** argv) {
  testing::InitGoogleTest(&argc, argv);
  return RUN_ALL_TESTS();
}
endsnippet

