snippet snippet_cbt_repo "cbt orm interface" b
/*
import (
	"gorm.io/gorm"
)
*/
type ${1:Table}Repo interface {
	// transaction
	BeginWithHandler(handler *gorm.DB) ${1:Table}Repo

	// inserter()
	Insert(ctx context.Context, ${2:table} *${1:Table}) (int64, error)

	// sql(value="select * from ${2:table} where id = #id", mode = "named_placeholder")
	Find(ctx context.Context, id int64) (${1:Table}, error)

	// updater(v2="true", skipZero="false", skipFields=["created_at", "created_by"])
	Update(ctx context.Context, ${2:table} *${1:Table}) (int64, error)
}

var (
	${2:table}R    ${1:Table}Repo
	${2:table}W    ${1:Table}Repo
	${2:table}Once sync.Once
)

func init${1:Table}() {
	${2:table}Once.Do(func() {
		${2:table}R = New${1:Table}Repo(clientx.GetFaceuCapcutDpRds().GetR())
		${2:table}W = New${1:Table}Repo(clientx.GetFaceuCapcutDpRds().GetW())
	})
}

func Get${1:Table}R() ${1:Table}Repo {
	init${1:Table}()
	return ${2:table}R
}

func Get${1:Table}W() ${1:Table}Repo {
	init${1:Table}()
	return ${2:table}W
}
endsnippet

snippet snippet_cbt_transaction "cbt transaction" b
/*
import (
	"gorm.io/gorm"
)
*/
type TransactionManager interface {
	// transaction(action="begin")
	Begin(ctx context.Context) (TransactionManager, error)

	// transaction(action="commit")
	Commit(ctx context.Context) (*gorm.DB, error)

	// transaction(action="rollback")
	Rollback(ctx context.Context) (*gorm.DB, error)

	// DoTransaction 自动实现commit和rollback
	// transaction(action="do_transaction")
	DoTransaction(ctx context.Context, fn func(ctx context.Context, inter TransactionManager) error) error

	// delegation()
	Get${1:Table}Repo(repo ${1:Table}Repo) ${1:Table}Repo
}

var (
	transactionManager     TransactionManager
	transactionManagerOnce sync.Once
)

func GetTransactionManager() TransactionManager {
	transactionManagerOnce.Do(func() {
		transactionManager = NewTransactionManager(clientx.GetFaceuCapcutDpRds().GetW())
	})

	return transactionManager
}
endsnippet

snippet snippet_hertz "hertz method" b
func ${1:method}(ctx context.Context, request *model.${1}Req) (data *model.${1}Data, err error) {
	data = &model.${1}Data{
	}
	return data, nil
}
endsnippet

snippet snippet_hertz_req "hertz method with feed_http.Req as request" b
func ${1:method}(ctx context.Context, request *feed_http.Req) (data *model.${1}Data, err error) {
	data = &model.${1}Data{
	}
	return data, nil
}
endsnippet

snippet snippet_hertz_manager_req "hertz method with pop.ManagerReq as request" b
func ${1:method}(ctx context.Context, request *pop.ManagerReq) (data *model.${1}Data, err error) {
	data = &model.${1}Data{
	}
	return data, nil
}
endsnippet

snippet snippet_hertz_resp "hertz method with feed_http.Resp as response" b
func ${1:method}(ctx context.Context, request *model.${1}Req) error {
	return nil
}
endsnippet

snippet snippet_kitex "kitex method" b
func ${1:method}(ctx context.Context, req *${2:service}.${1:method}Req) (rsp *${2:service}.${1:method}Resp, err error) {
	const where = "${1:method}"
	rsp = &${2:service}.${1:method}Resp{
		BaseResp: base.NewBaseResp(),
	}
	defer func() {
		fault.SetBaseResp(ctx, rsp.BaseResp, err)
	}()

	if err = is${1:method}ReqValid(req); err != nil {
		return rsp, errorx.Trace(err)
	}

	return
}

func is${1:method}ReqValid(req *${2:service}.${1:method}Req) error {
	return nil
}
endsnippet

snippet snippet_kitex_req "kitex method with feed_rpc.Req as request" b
func ${1:method}(ctx context.Context, req *feed_rpc.Req) (rsp *${2:service}.${1:method}Resp, err error) {
	const where = "${1:method}"
	rsp = &${2:service}.${1:method}Resp{
		BaseResp: base.NewBaseResp(),
	}
	defer func() {
		fault.SetBaseResp(ctx, rsp.BaseResp, err)
	}()

	return
}

endsnippet

snippet snippet_kitex_resp "kitex method with feed_rpc.Resp as response" b
func ${1:method}(ctx context.Context, req *${2:service}.${1:method}Req) (rsp *feed_rpc.Resp, err error) {
	const where = "${1:method}"
	rsp = &feed_rpc.Resp{
		BaseResp: base.NewBaseResp(),
	}
	defer func() {
		fault.SetBaseResp(ctx, rsp.BaseResp, err)
	}()

	if err = is${1:method}ReqValid(req); err != nil {
		return rsp, errorx.Trace(err)
	}

	return
}

func is${1:method}ReqValid(req *${2:service}.${1:method}Req) error {
	return nil
}
endsnippet

snippet snippet_kitex_eventbus "kitex method for eventbus" b
type ${1:method}Message struct {
}

func Consume${1:method}(ctx context.Context, req *eventbus.MessageCallbackRequest) ( rsp *eventbus.MessageCallbackResponse, err error) {
	const where = "Consume${1:method}"
	rsp = &eventbus.MessageCallbackResponse{
		BaseResp: base.NewBaseResp(),
	}
	defer func() {
		fault.SetBaseResp(ctx, rsp.BaseResp, err)
	}()

	msg, err := isConsume${1:method}ReqValid(ctx, req)
	if err != nil {
		return rsp, errorx.Trace(err)
	}

	return
}

func isConsume${1:method}ReqValid(ctx context.Context, req *eventbus.MessageCallbackRequest) (${1:method}Message, error) {
	var msg ${1:method}Message
	if err := jsoniter.Unmarshal(req.Message.Value, &msg); err != nil {
		return ${1:method}Message{}, errorx.Trace(err)
	}

	if err := validator.Validate(msg); err != nil {
		return ${1:method}Message{}, errorx.Trace(err)
	}

	return msg, nil
}
endsnippet

snippet snippet_test_suite "unit test template" b
func Test$1(t *testing.T) {
	suite.Run(t, new($1Suite))
}

type ${1:Template}Suite struct {
	suite.Suite
}

func (s *$1Suite) TestEx() {
	assert := s.Assert()
	t := s.T()
}
endsnippet

snippet snippet_test_bytedance "unit test template" b
func Test$1(t *testing.T) {
	suite.Run(t, new($1Suite))
}

type ${1:Template}Suite struct {
	suite.Suite
	ctx context.Context
}

func (s *$1Suite) SetupSuite() {
	s.ctx = context.Background()
}

func (s *$1Suite) TearDownTest() {
	logs.Flush()
}

func (s *$1Suite) TestEx() {
	assert := s.Assert()
	t := s.T()
}
endsnippet

snippet snippet_test_kitex "unit test template for kitex" b
func Test$1(t *testing.T) {
	suite.Run(t, new($1Suite))
}

type ${1:Template}Suite struct {
	suite.Suite
	ctx context.Context
}

func (s *${1:method}Suite) SetupSuite() {
	s.ctx = context.Background()
}

func (s *$1Suite) TearDownTest() {
	logs.Flush()
}

func (s *$1Suite) Test_isValid() {
	assert := s.Assert()
	t := s.T()

	req := ${2:service}.${1:method}Req{
	}

	t.Run("ok", func(t *testing.T) {
		assert.Nil(is${1:method}ReqValid(&req))
	})

	tds := []struct {
		name string
		req  *${2:service}.${1:method}Req
	}{
		{
			name: "req nil",
			req:  nil,
		},
		{
			name: "xxx",
			req:  func() *${2:service}.${1:method}Req{
				req := req
				return &req
			}(),
		},
	}

	for _, td := range tds {
		t.Run(td.name, func(t *testing.T) {
			err := is${1:method}ReqValid(td.req)
			assert.ErrorContains(err, td.name)
		})
	}
}
endsnippet

snippet glog_init "init glog" b
flag.Set("alsologtostderr", "true")
flag.Set("logtostderr", "true")
flag.Parse()
endsnippet

snippet snippet_cmd "cmd" b
func init() {
	flag.Set("alsologtostderr", "true")
	flag.Set("log_dir", "./")
	flag.Parse()
}

func main() {
	defer glog.Flush()

	ctx := context.Background()
	if err := run(ctx); err != nil {
		glog.Errorf("run error %+v", err)
		os.Exit(-1)
		return
	}
	glog.Infoln("done")
}

func run(ctx context.Context) error {
	return nil
}
endsnippet

snippet snippet_cmd_bytedance "cmd at bytedance" b
func init() {
	flag.Parse()
}

func main() {
	defer logs.Flush()

	ctx := context.Background()
	ctx = ctxvalues.SetLogID(ctx, logid.GetNginxID())

	if err := run(ctx); err != nil {
		logs.CtxError(ctx, "run error %+v", err)
		os.Exit(-1)
		return
	}
	logs.CtxInfo(ctx, "done")
}

func run(ctx context.Context) error {
	return nil
}
endsnippet

